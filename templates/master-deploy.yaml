apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ template "master.fullname" . }}"
  labels:
    app: "{{ template "name" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "master"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.master.replicas }}
  template:
    metadata:
      labels:
        app: "{{ template "name" . }}"
        component: "master"
        release: "{{ .Release.Name }}"
    spec:
      serviceAccountName: "{{ .Values.serviceAccountName }}"
      {{- if eq .Values.master.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "name" . }}"
                  component: "master"
                  release: "{{ .Release.Name }}"
      {{- else if eq .Values.master.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "name" . }}"
                  component: "master"
                  release: "{{ .Release.Name }}"
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
      - name: sysctl
        image: "{{ .Values.image }}"
        imagePullPolicy: "{{ .Values.pullPolicy }}"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: "elasticsearch"
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
        - name: ELASTICSEARCH_CLUSTER_NAME
          value: "{{ .Values.name }}"
        - name: ELASTICSEARCH_PLUGINS
          value: "{{ .Values.plugins }}"
        - name: ELASTICSEARCH_HEAP_SIZE
          value: "{{ .Values.ingest.heapSize }}"
        - name: ELASTICSEARCH_IS_DEDICATED_NODE
          value: "yes"
        - name: ELASTICSEARCH_NODE_TYPE
          value: "master"
        ports:
        - name: transport
          containerPort: 9300
        livenessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
{{ toYaml .Values.master.resources | indent 10 }}
        volumeMounts:
        - mountPath: /bitnami/elasticsearch/conf/elasticsearch_custom.yml
          name: "config"
          subPath: elasticsearch_custom.yml
        - name: "data"
          mountPath: "/bitnami/elasticsearch/data"
      volumes:
      - name: "config"
        configMap:
          name: "{{ template "fullname" . }}"
      - name: "data"
        emptyDir: {}
